import os
import re
import math
import telebot
from telebot import types
from flask import Flask, request, jsonify

# =======================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# =======================
# –¢–æ–∫–µ–Ω —É–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ—Å—å–±–µ
TOKEN = "8225106462:AAF1lwaxNmFT3H9jtxATDDgF8V-krfUa3zI"
FX_EUR_UAH = 49.0  # –∫—É—Ä—Å ‚Ç¨‚Üí‚Ç¥ –ø–æ –¢–ó
MANAGER_HANDLE = "@alex_digital_beauty"

# =======================
# ‚ôªÔ∏è –•–†–ê–ù–ò–õ–ò–©–ï –°–û–°–¢–û–Ø–ù–ò–ô
# =======================
USER_STATE = {}  # user_id -> dict

def reset_state(user_id: int):
    USER_STATE[user_id] = {
        "device": None,
        "cost_eur": None,
        "procedures_per_month": None,
        "price_uah": None,
        "salary_percent": None,
    }

def get_state(user_id: int):
    if user_id not in USER_STATE:
        reset_state(user_id)
    return USER_STATE[user_id]

def parse_number(text: str) -> float | None:
    """–ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞: '27 000‚Ç¨', '3500 –≥—Ä–Ω', '2,5' -> float"""
    try:
        cleaned = re.sub(r"[^\d,.\-]", "", text).replace(",", ".")
        if cleaned.count(".") > 1:
            cleaned = cleaned.replace(".", "", cleaned.count(".") - 1)
        return float(cleaned)
    except Exception:
        return None

def round1(x: float) -> float:
    return math.floor(x * 10 + 0.5) / 10.0

# =======================
# üéõ –ö–õ–ê–í–ò–ê–¢–£–†–´
# =======================
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–∫—É–ø–Ω—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É")
    kb.row(f"üó£Ô∏è –ó–≤ º—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ({MANAGER_HANDLE})")
    return kb

def back_or_manager_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton(text="‚úâÔ∏è –ó–≤ º—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{MANAGER_HANDLE.removeprefix('@')}"))
    ikb.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    return ikb

def devices_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("IPL A-Tone", callback_data="dev__IPL A-Tone"))
    ikb.add(types.InlineKeyboardButton("Finexel CO2", callback_data="dev__Finexel CO2"))
    ikb.add(types.InlineKeyboardButton("10THERMA", callback_data="dev__10THERMA"))
    ikb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é", callback_data="back_to_menu"))
    return ikb

def q1_cost_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("27000‚Ç¨", callback_data="cost__27000"))
    ikb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≤–∞—Ä—Ç—ñ—Å—Ç—å", callback_data="cost__other"))
    return ikb

def q2_qty_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("200 –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data="qty__200"))
    ikb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="qty__other"))
    return ikb

def q3_price_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("3500 –≥—Ä–Ω", callback_data="price__3500"))
    ikb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≤–∞—Ä—Ç—ñ—Å—Ç—å", callback_data="price__other"))
    return ikb

def q4_salary_kb():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("15% –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏", callback_data="sal__15"))
    ikb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π %", callback_data="sal__other"))
    return ikb

# =======================
# üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =======================
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# =======================
# üì≤ –•–≠–ù–î–õ–ï–†–´
# =======================
@bot.message_handler(commands=["start", "menu"])
def cmd_start(message: types.Message):
    reset_state(message.from_user.id)
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–∫—É–ø–Ω–æ—Å—Ç—ñ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text and "–ó–≤ º—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" in m.text)
def contact_manager(message: types.Message):
    bot.send_message(
        message.chat.id,
        f"–î–ª—è –∑–≤ º—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏: {MANAGER_HANDLE}",
        reply_markup=back_or_manager_kb()
    )

@bot.message_handler(func=lambda m: m.text == "üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–∫—É–ø–Ω—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É")
def start_calc(message: types.Message):
    st = get_state(message.from_user.id)
    st["device"] = None
    bot.send_message(
        message.chat.id,
        "üîß <b>–û–±–µ—Ä—ñ—Ç—å –∞–ø–∞—Ä–∞—Ç</b>",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ:", reply_markup=devices_kb())

@bot.callback_query_handler(func=lambda c: c.data == "back_to_menu")
def cb_back_to_menu(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é‚Ä¶", reply_markup=main_menu_kb())

@bot.callback_query_handler(func=lambda c: c.data.startswith("dev__"))
def cb_choose_device(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    device = call.data.split("__", 1)[1]
    st = get_state(call.from_user.id)
    st["device"] = device

    if device != "IPL A-Tone":
        bot.send_message(
            call.message.chat.id,
            f"‚ÑπÔ∏è –ü–æ–∫–∏ —â–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä-—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è <b>IPL A-Tone</b>.\n"
            f"–ó–∞–ø—É—â—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —É —Ü—å–æ–º—É –∂ —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è <b>{device}</b>."
        )

    bot.send_message(call.message.chat.id, "üí∂ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É</b>", reply_markup=q1_cost_kb())

@bot.callback_query_handler(func=lambda c: c.data.startswith("cost__"))
def cb_q1_cost(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    st = get_state(call.from_user.id)
    _, val = call.data.split("__", 1)
    if val == "other":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É –≤ ‚Ç¨ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 27000):")
        bot.register_next_step_handler(msg, handle_cost_custom)
    else:
        st["cost_eur"] = float(val)
        ask_q2(call.message)

def handle_cost_custom(message: types.Message):
    st = get_state(message.from_user.id)
    num = parse_number(message.text)
    if num is None or num <= 0:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –≤ ‚Ç¨):")
        bot.register_next_step_handler(msg, handle_cost_custom)
        return
    st["cost_eur"] = float(num)
    ask_q2(message)

def ask_q2(msg_or_message):
    chat_id = msg_or_message.chat.id
    bot.send_message(chat_id, "üìà <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–∞ –º—ñ—Å—è—Ü—å</b>", reply_markup=q2_qty_kb())

@bot.callback_query_handler(func=lambda c: c.data.startswith("qty__"))
def cb_q2_qty(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    st = get_state(call.from_user.id)
    _, val = call.data.split("__", 1)
    if val == "other":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–∞ –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200):")
        bot.register_next_step_handler(msg, handle_qty_custom)
    else:
        st["procedures_per_month"] = int(val)
        ask_q3(call.message)

def handle_qty_custom(message: types.Message):
    st = get_state(message.from_user.id)
    num = parse_number(message.text)
    if num is None or num <= 0:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ):")
        bot.register_next_step_handler(msg, handle_qty_custom)
        return
    st["procedures_per_month"] = int(num)
    ask_q3(message)

def ask_q3(msg_or_message):
    chat_id = msg_or_message.chat.id
    bot.send_message(chat_id, "üíµ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏</b>", reply_markup=q3_price_kb())

@bot.callback_query_handler(func=lambda c: c.data.startswith("price__"))
def cb_q3_price(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    st = get_state(call.from_user.id)
    _, val = call.data.split("__", 1)
    if val == "other":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤ –≥—Ä–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 3500):")
        bot.register_next_step_handler(msg, handle_price_custom)
    else:
        st["price_uah"] = float(val)
        ask_q4(call.message)

def handle_price_custom(message: types.Message):
    st = get_state(message.from_user.id)
    num = parse_number(message.text)
    if num is None or num <= 0:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –≤ –≥—Ä–Ω):")
        bot.register_next_step_handler(msg, handle_price_custom)
        return
    st["price_uah"] = float(num)
    ask_q4(message)

def ask_q4(msg_or_message):
    chat_id = msg_or_message.chat.id
    bot.send_message(chat_id, "üë©‚Äç‚öïÔ∏è <b>–ó–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞ —Ñ–∞—Ö—ñ–≤—Ü—è</b>", reply_markup=q4_salary_kb())

@bot.callback_query_handler(func=lambda c: c.data.startswith("sal__"))
def cb_q4_salary(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    st = get_state(call.from_user.id)
    _, val = call.data.split("__", 1)
    if val == "other":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å % –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15):")
        bot.register_next_step_handler(msg, handle_salary_custom)
    else:
        st["salary_percent"] = float(val)
        finish_and_show(call.message)

def handle_salary_custom(message: types.Message):
    st = get_state(message.from_user.id)
    num = parse_number(message.text)
    if num is None or num < 0 or num >= 100:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π %. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 99:")
        bot.register_next_step_handler(msg, handle_salary_custom)
        return
    st["salary_percent"] = float(num)
    finish_and_show(message)

# =======================
# üßÆ –†–ê–°–ß–Å–¢ –ò –í–´–í–û–î
# =======================
def finish_and_show(message: types.Message):
    st = get_state(message.from_user.id)
    device = st["device"] or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–ø–∞—Ä–∞—Ç"
    cost_eur = st["cost_eur"]
    qty = st["procedures_per_month"]
    price = st["price_uah"]
    percent = st["salary_percent"]

    if None in (cost_eur, qty, price, percent):
        bot.send_message(message.chat.id, "–î–∞–Ω—ñ –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É: /start")
        return

    total_cost_uah = cost_eur * FX_EUR_UAH
    specialist_per_proc = price * (percent / 100.0)
    net_per_month = (price - specialist_per_proc) * qty
    months = total_cost_uah / net_per_month if net_per_month > 0 else float("inf")
    months_rounded = round1(months)

    result_text = (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–∫—É–ø–Ω–æ—Å—Ç—ñ</b>\n\n"
        f"‚Ä¢ –ê–ø–∞—Ä–∞—Ç: <b>{device}</b>\n"
        f"‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É: <b>{int(cost_eur):,}‚Ç¨</b> √ó –∫—É—Ä—Å {int(FX_EUR_UAH)} = <b>{int(total_cost_uah):,} –≥—Ä–Ω</b>\n"
        f"‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –≤ –º—ñ—Å—è—Ü—å: <b>{qty}</b>\n"
        f"‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: <b>{int(price):,} –≥—Ä–Ω</b>\n"
        f"‚Ä¢ –ó–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞ —Ñ–∞—Ö—ñ–≤—Ü—è: <b>{percent:.0f}%</b> "
        f"(–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: <b>{int(round(specialist_per_proc)):,} –≥—Ä–Ω</b>)\n\n"
        f"‚Ä¢ üü¢ –û–∫—É–ø–Ω—ñ—Å—Ç—å –∞–ø–∞—Ä–∞—Ç—É: <b>{months_rounded} –º—ñ—Å—è—Ü—è</b>\n\n"
        f"–î–ª—è –∑–≤ º—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏ {MANAGER_HANDLE}"
    ).replace(",", " ")

    bot.send_message(message.chat.id, result_text, reply_markup=back_or_manager_kb())

# =======================
# üåê –í–ï–ë–•–£–ö–ò –î–õ–Ø RENDER
# =======================
app = Flask(__name__)

@app.route("/", methods=["GET"])
def health():
    return jsonify(ok=True), 200

@app.route(f"/{TOKEN}", methods=["POST"])
def tg_webhook():
    try:
        update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "ok", 200

def setup_webhook():
    try:
        base_url = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("WEBHOOK_URL")
        if base_url:
            wh_url = f"{base_url.rstrip('/')}/{TOKEN}"
            bot.remove_webhook()
            bot.set_webhook(url=wh_url, max_connections=20, allowed_updates=["message", "callback_query"])
            print("Webhook set:", wh_url)
        else:
            print("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω RENDER_EXTERNAL_URL/WEBHOOK_URL ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ polling.")
    except Exception as e:
        print("Webhook setup failed:", e)

# =======================
# ‚ñ∂Ô∏è –¢–û–ß–ö–ò –í–•–û–î–ê
# =======================
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω–æ ‚Äî polling
    print("Running in polling mode (local dev)‚Ä¶")
    bot.infinity_polling(skip_pending=True, timeout=60)
else:
    # –ù–∞ Render ‚Äî –≤–µ–±—Ö—É–∫
    setup_webhook()
